# coding: utf-8

"""
    HPC Pack REST API 2019

    This is the API spec for Microsoft HPC Pack 2019.  # noqa: E501

    OpenAPI spec version: 2020-01-01.6.0
    Contact: hpcpack@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OperationLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'state': 'str',
        'operator': 'str',
        'node': 'str',
        'cancelable': 'bool',
        'update_time': 'datetime',
        'entries': 'list[OperationLogEntry]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'state': 'State',
        'operator': 'Operator',
        'node': 'Node',
        'cancelable': 'Cancelable',
        'update_time': 'UpdateTime',
        'entries': 'Entries'
    }

    def __init__(self, id=None, name=None, state=None, operator=None, node=None, cancelable=None, update_time=None, entries=None, _configuration=None):  # noqa: E501
        """OperationLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._state = None
        self._operator = None
        self._node = None
        self._cancelable = None
        self._update_time = None
        self._entries = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if operator is not None:
            self.operator = operator
        if node is not None:
            self.node = node
        if cancelable is not None:
            self.cancelable = cancelable
        if update_time is not None:
            self.update_time = update_time
        if entries is not None:
            self.entries = entries

    @property
    def id(self):
        """Gets the id of this OperationLog.  # noqa: E501


        :return: The id of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperationLog.


        :param id: The id of this OperationLog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OperationLog.  # noqa: E501


        :return: The name of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationLog.


        :param name: The name of this OperationLog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this OperationLog.  # noqa: E501


        :return: The state of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OperationLog.


        :param state: The state of this OperationLog.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def operator(self):
        """Gets the operator of this OperationLog.  # noqa: E501


        :return: The operator of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this OperationLog.


        :param operator: The operator of this OperationLog.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def node(self):
        """Gets the node of this OperationLog.  # noqa: E501


        :return: The node of this OperationLog.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this OperationLog.


        :param node: The node of this OperationLog.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def cancelable(self):
        """Gets the cancelable of this OperationLog.  # noqa: E501


        :return: The cancelable of this OperationLog.  # noqa: E501
        :rtype: bool
        """
        return self._cancelable

    @cancelable.setter
    def cancelable(self, cancelable):
        """Sets the cancelable of this OperationLog.


        :param cancelable: The cancelable of this OperationLog.  # noqa: E501
        :type: bool
        """

        self._cancelable = cancelable

    @property
    def update_time(self):
        """Gets the update_time of this OperationLog.  # noqa: E501


        :return: The update_time of this OperationLog.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OperationLog.


        :param update_time: The update_time of this OperationLog.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def entries(self):
        """Gets the entries of this OperationLog.  # noqa: E501


        :return: The entries of this OperationLog.  # noqa: E501
        :rtype: list[OperationLogEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this OperationLog.


        :param entries: The entries of this OperationLog.  # noqa: E501
        :type: list[OperationLogEntry]
        """

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationLog):
            return True

        return self.to_dict() != other.to_dict()
