# coding: utf-8

"""
    HPC Pack REST API 2019

    This is the API spec for Microsoft HPC Pack 2019.  # noqa: E501

    OpenAPI spec version: 2020-01-01.6.0
    Contact: hpcpack@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NodeGroupOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'operation': 'str',
        'node_names': 'list[str]'
    }

    attribute_map = {
        'group_name': 'GroupName',
        'operation': 'Operation',
        'node_names': 'NodeNames'
    }

    def __init__(self, group_name=None, operation=None, node_names=None, _configuration=None):  # noqa: E501
        """NodeGroupOperation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_name = None
        self._operation = None
        self._node_names = None
        self.discriminator = None

        if group_name is not None:
            self.group_name = group_name
        if operation is not None:
            self.operation = operation
        if node_names is not None:
            self.node_names = node_names

    @property
    def group_name(self):
        """Gets the group_name of this NodeGroupOperation.  # noqa: E501


        :return: The group_name of this NodeGroupOperation.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this NodeGroupOperation.


        :param group_name: The group_name of this NodeGroupOperation.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def operation(self):
        """Gets the operation of this NodeGroupOperation.  # noqa: E501


        :return: The operation of this NodeGroupOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this NodeGroupOperation.


        :param operation: The operation of this NodeGroupOperation.  # noqa: E501
        :type: str
        """
        allowed_values = ["add", "remove"]  # noqa: E501
        if (self._configuration.client_side_validation and
                operation not in allowed_values):
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def node_names(self):
        """Gets the node_names of this NodeGroupOperation.  # noqa: E501


        :return: The node_names of this NodeGroupOperation.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_names

    @node_names.setter
    def node_names(self, node_names):
        """Sets the node_names of this NodeGroupOperation.


        :param node_names: The node_names of this NodeGroupOperation.  # noqa: E501
        :type: list[str]
        """

        self._node_names = node_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeGroupOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeGroupOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeGroupOperation):
            return True

        return self.to_dict() != other.to_dict()
