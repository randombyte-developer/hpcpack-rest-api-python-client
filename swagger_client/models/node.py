# coding: utf-8

"""
    HPC Pack REST API 2019

    This is the API spec for Microsoft HPC Pack 2019.  # noqa: E501

    OpenAPI spec version: 2020-01-01.6.0
    Contact: hpcpack@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'state': 'NodeState',
        'health': 'NodeHealth',
        'template': 'str',
        'location': 'str',
        'memory_size': 'float',
        'cores': 'float',
        'sockets': 'float',
        'hpc_pack_version': 'str',
        'on_azure': 'bool',
        'groups': 'list[str]',
        'roles': 'list[str]',
        'installed_service_roles': 'list[NodeServiceRole]',
        'active_service_roles': 'list[NodeServiceRole]'
    }

    attribute_map = {
        'name': 'Name',
        'state': 'State',
        'health': 'Health',
        'template': 'Template',
        'location': 'Location',
        'memory_size': 'MemorySize',
        'cores': 'Cores',
        'sockets': 'Sockets',
        'hpc_pack_version': 'HpcPackVersion',
        'on_azure': 'OnAzure',
        'groups': 'Groups',
        'roles': 'Roles',
        'installed_service_roles': 'InstalledServiceRoles',
        'active_service_roles': 'ActiveServiceRoles'
    }

    def __init__(self, name=None, state=None, health=None, template=None, location=None, memory_size=None, cores=None, sockets=None, hpc_pack_version=None, on_azure=None, groups=None, roles=None, installed_service_roles=None, active_service_roles=None, _configuration=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._state = None
        self._health = None
        self._template = None
        self._location = None
        self._memory_size = None
        self._cores = None
        self._sockets = None
        self._hpc_pack_version = None
        self._on_azure = None
        self._groups = None
        self._roles = None
        self._installed_service_roles = None
        self._active_service_roles = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if health is not None:
            self.health = health
        if template is not None:
            self.template = template
        if location is not None:
            self.location = location
        if memory_size is not None:
            self.memory_size = memory_size
        if cores is not None:
            self.cores = cores
        if sockets is not None:
            self.sockets = sockets
        if hpc_pack_version is not None:
            self.hpc_pack_version = hpc_pack_version
        if on_azure is not None:
            self.on_azure = on_azure
        if groups is not None:
            self.groups = groups
        if roles is not None:
            self.roles = roles
        if installed_service_roles is not None:
            self.installed_service_roles = installed_service_roles
        if active_service_roles is not None:
            self.active_service_roles = active_service_roles

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501


        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Node.  # noqa: E501


        :return: The state of this Node.  # noqa: E501
        :rtype: NodeState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.


        :param state: The state of this Node.  # noqa: E501
        :type: NodeState
        """

        self._state = state

    @property
    def health(self):
        """Gets the health of this Node.  # noqa: E501


        :return: The health of this Node.  # noqa: E501
        :rtype: NodeHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Node.


        :param health: The health of this Node.  # noqa: E501
        :type: NodeHealth
        """

        self._health = health

    @property
    def template(self):
        """Gets the template of this Node.  # noqa: E501


        :return: The template of this Node.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Node.


        :param template: The template of this Node.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def location(self):
        """Gets the location of this Node.  # noqa: E501


        :return: The location of this Node.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Node.


        :param location: The location of this Node.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def memory_size(self):
        """Gets the memory_size of this Node.  # noqa: E501


        :return: The memory_size of this Node.  # noqa: E501
        :rtype: float
        """
        return self._memory_size

    @memory_size.setter
    def memory_size(self, memory_size):
        """Sets the memory_size of this Node.


        :param memory_size: The memory_size of this Node.  # noqa: E501
        :type: float
        """

        self._memory_size = memory_size

    @property
    def cores(self):
        """Gets the cores of this Node.  # noqa: E501


        :return: The cores of this Node.  # noqa: E501
        :rtype: float
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this Node.


        :param cores: The cores of this Node.  # noqa: E501
        :type: float
        """

        self._cores = cores

    @property
    def sockets(self):
        """Gets the sockets of this Node.  # noqa: E501


        :return: The sockets of this Node.  # noqa: E501
        :rtype: float
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this Node.


        :param sockets: The sockets of this Node.  # noqa: E501
        :type: float
        """

        self._sockets = sockets

    @property
    def hpc_pack_version(self):
        """Gets the hpc_pack_version of this Node.  # noqa: E501


        :return: The hpc_pack_version of this Node.  # noqa: E501
        :rtype: str
        """
        return self._hpc_pack_version

    @hpc_pack_version.setter
    def hpc_pack_version(self, hpc_pack_version):
        """Sets the hpc_pack_version of this Node.


        :param hpc_pack_version: The hpc_pack_version of this Node.  # noqa: E501
        :type: str
        """

        self._hpc_pack_version = hpc_pack_version

    @property
    def on_azure(self):
        """Gets the on_azure of this Node.  # noqa: E501


        :return: The on_azure of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._on_azure

    @on_azure.setter
    def on_azure(self, on_azure):
        """Sets the on_azure of this Node.


        :param on_azure: The on_azure of this Node.  # noqa: E501
        :type: bool
        """

        self._on_azure = on_azure

    @property
    def groups(self):
        """Gets the groups of this Node.  # noqa: E501


        :return: The groups of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Node.


        :param groups: The groups of this Node.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def roles(self):
        """Gets the roles of this Node.  # noqa: E501


        :return: The roles of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Node.


        :param roles: The roles of this Node.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def installed_service_roles(self):
        """Gets the installed_service_roles of this Node.  # noqa: E501


        :return: The installed_service_roles of this Node.  # noqa: E501
        :rtype: list[NodeServiceRole]
        """
        return self._installed_service_roles

    @installed_service_roles.setter
    def installed_service_roles(self, installed_service_roles):
        """Sets the installed_service_roles of this Node.


        :param installed_service_roles: The installed_service_roles of this Node.  # noqa: E501
        :type: list[NodeServiceRole]
        """

        self._installed_service_roles = installed_service_roles

    @property
    def active_service_roles(self):
        """Gets the active_service_roles of this Node.  # noqa: E501


        :return: The active_service_roles of this Node.  # noqa: E501
        :rtype: list[NodeServiceRole]
        """
        return self._active_service_roles

    @active_service_roles.setter
    def active_service_roles(self, active_service_roles):
        """Sets the active_service_roles of this Node.


        :param active_service_roles: The active_service_roles of this Node.  # noqa: E501
        :type: list[NodeServiceRole]
        """

        self._active_service_roles = active_service_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()
