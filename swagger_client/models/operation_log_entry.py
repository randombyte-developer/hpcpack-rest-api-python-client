# coding: utf-8

"""
    HPC Pack REST API 2019

    This is the API spec for Microsoft HPC Pack 2019.  # noqa: E501

    OpenAPI spec version: 2020-01-01.6.0
    Contact: hpcpack@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OperationLogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'severity': 'str',
        'source': 'str',
        'create_time': 'datetime'
    }

    attribute_map = {
        'message': 'Message',
        'severity': 'Severity',
        'source': 'Source',
        'create_time': 'CreateTime'
    }

    def __init__(self, message=None, severity=None, source=None, create_time=None, _configuration=None):  # noqa: E501
        """OperationLogEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._severity = None
        self._source = None
        self._create_time = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if severity is not None:
            self.severity = severity
        if source is not None:
            self.source = source
        if create_time is not None:
            self.create_time = create_time

    @property
    def message(self):
        """Gets the message of this OperationLogEntry.  # noqa: E501


        :return: The message of this OperationLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OperationLogEntry.


        :param message: The message of this OperationLogEntry.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this OperationLogEntry.  # noqa: E501


        :return: The severity of this OperationLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this OperationLogEntry.


        :param severity: The severity of this OperationLogEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Error", "Warning", "Information", "Trace"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity not in allowed_values):
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this OperationLogEntry.  # noqa: E501


        :return: The source of this OperationLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this OperationLogEntry.


        :param source: The source of this OperationLogEntry.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def create_time(self):
        """Gets the create_time of this OperationLogEntry.  # noqa: E501


        :return: The create_time of this OperationLogEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OperationLogEntry.


        :param create_time: The create_time of this OperationLogEntry.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationLogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationLogEntry):
            return True

        return self.to_dict() != other.to_dict()
