# coding: utf-8

"""
    HPC Pack REST API 2019

    This is the API spec for Microsoft HPC Pack 2019.  # noqa: E501

    OpenAPI spec version: 2020-01-01.6.0
    Contact: hpcpack@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_task(self, job_id, **kwargs):  # noqa: E501
        """Add Task  # noqa: E501

        Add a task to a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_task(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of task to add.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_task_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_task_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def add_task_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Add Task  # noqa: E501

        Add a task to a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_task_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of task to add.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `add_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_job(self, job_id, **kwargs):  # noqa: E501
        """Cancel Job  # noqa: E501

        Cancel the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the job immediately without using the grace period for canceling the tasks in the job and without running the node release task, if the job contains one. True indicates that the job should stop immediately without using the grace period for canceling the tasks in the job and without running the node release task. False indicates that the job should not stop immediately and should use the grace period for canceling the tasks in the job and run the node release task.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def cancel_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Cancel Job  # noqa: E501

        Cancel the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the job immediately without using the grace period for canceling the tasks in the job and without running the node release task, if the job contains one. True indicates that the job should stop immediately without using the grace period for canceling the tasks in the job and without running the node release task. False indicates that the job should not stop immediately and should use the grace period for canceling the tasks in the job and run the node release task.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'forced', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `cancel_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'forced' in params:
            query_params.append(('forced', params['forced']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_subtask(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Cancel Subtask  # noqa: E501

        Cancel the specified subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_subtask(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the subtask immediately without using the grace period for canceling a task. True indicates that the subtask should stop immediately without using the grace period for canceling a task. False indicates that the subtask should use the grace period for canceling.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
            return data

    def cancel_subtask_with_http_info(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Cancel Subtask  # noqa: E501

        Cancel the specified subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_subtask_with_http_info(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the subtask immediately without using the grace period for canceling a task. True indicates that the subtask should stop immediately without using the grace period for canceling a task. False indicates that the subtask should use the grace period for canceling.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'subtask_id', 'x_ms_as_user', 'forced', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_subtask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `cancel_subtask`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `cancel_subtask`")  # noqa: E501
        # verify the required parameter 'subtask_id' is set
        if self.api_client.client_side_validation and ('subtask_id' not in params or
                                                       params['subtask_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subtask_id` when calling `cancel_subtask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'subtask_id' in params:
            path_params['subtaskId'] = params['subtask_id']  # noqa: E501

        query_params = []
        if 'forced' in params:
            query_params.append(('forced', params['forced']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/subtasks/{subtaskId}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_task(self, job_id, task_id, **kwargs):  # noqa: E501
        """Cancel Task  # noqa: E501

        Cancel the specified task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_task(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the task immediately without using the grace period for canceling a task. True indicates that the task should stop immediately without using the grace period for canceling a task. False indicates that the task should use the grace period for canceling a task.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def cancel_task_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Cancel Task  # noqa: E501

        Cancel the specified task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_task_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param bool forced: Specifies whether to stop the task immediately without using the grace period for canceling a task. True indicates that the task should stop immediately without using the grace period for canceling a task. False indicates that the task should use the grace period for canceling a task.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'forced', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `cancel_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `cancel_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'forced' in params:
            query_params.append(('forced', params['forced']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_job(self, **kwargs):  # noqa: E501
        """Create Job  # noqa: E501

        Creates a new job on the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to create
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_job_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_job_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_job_with_http_info(self, **kwargs):  # noqa: E501
        """Create Job  # noqa: E501

        Creates a new job on the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to create
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_job" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_job_from_xml(self, **kwargs):  # noqa: E501
        """Create Job From XML  # noqa: E501

        Create a new job on the HPC cluster by using the information in the specified job XML string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job_from_xml(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str xml: A job described in XML. For an example:  ```xml <Job>   <Tasks>     <Task CommandLine=\"hostname\" MinCores=\"1\" MaxCores=\"1\" />   </Tasks> </Job> ```  Note that since the server accepts input in JSON, the XML has to be encoded in a JSON string.  See [Job Schema](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc907034%28v%3dvs.85%29) for more details on the XML content. 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_job_from_xml_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_job_from_xml_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_job_from_xml_with_http_info(self, **kwargs):  # noqa: E501
        """Create Job From XML  # noqa: E501

        Create a new job on the HPC cluster by using the information in the specified job XML string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job_from_xml_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str xml: A job described in XML. For an example:  ```xml <Job>   <Tasks>     <Task CommandLine=\"hostname\" MinCores=\"1\" MaxCores=\"1\" />   </Tasks> </Job> ```  Note that since the server accepts input in JSON, the XML has to be encoded in a JSON string.  See [Job Schema](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc907034%28v%3dvs.85%29) for more details on the XML content. 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'xml']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_job_from_xml" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xml' in params:
            body_params = params['xml']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/jobFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node_group(self, **kwargs):  # noqa: E501
        """Create a Node Group  # noqa: E501

        Create a Node Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroup node_group:
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_node_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_node_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Node Group  # noqa: E501

        Create a Node Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroup node_group:
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'node_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_group' in params:
            body_params = params['node_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_group(self, name, **kwargs):  # noqa: E501
        """Delete Node Group  # noqa: E501

        Delete a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_node_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete Node Group  # noqa: E501

        Delete a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `delete_node_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def finish_job(self, job_id, **kwargs):  # noqa: E501
        """Finish Job  # noqa: E501

        Finish the specified job. It's silimar to canceling a job, but sets the job state to \"Finished\" rather than \"Canceled\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.finish_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.finish_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def finish_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Finish Job  # noqa: E501

        Finish the specified job. It's silimar to canceling a job, but sets the job state to \"Finished\" rather than \"Canceled\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `finish_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/finish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def finish_subtask(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Finish Subtask  # noqa: E501

        Finish the specified subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_subtask(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.finish_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
        else:
            (data) = self.finish_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
            return data

    def finish_subtask_with_http_info(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Finish Subtask  # noqa: E501

        Finish the specified subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_subtask_with_http_info(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'subtask_id', 'x_ms_as_user', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_subtask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `finish_subtask`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `finish_subtask`")  # noqa: E501
        # verify the required parameter 'subtask_id' is set
        if self.api_client.client_side_validation and ('subtask_id' not in params or
                                                       params['subtask_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subtask_id` when calling `finish_subtask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'subtask_id' in params:
            path_params['subtaskId'] = params['subtask_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/subtasks/{subtaskId}/finish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def finish_task(self, job_id, task_id, **kwargs):  # noqa: E501
        """Finish Task  # noqa: E501

        Finish the specified task. It's silimar to canceling a task, but sets the task state to \"Finished\" rather than \"Canceled\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_task(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.finish_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.finish_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def finish_task_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Finish Task  # noqa: E501

        Finish the specified task. It's silimar to canceling a task, but sets the task state to \"Finished\" rather than \"Canceled\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.finish_task_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finish_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `finish_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `finish_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/finish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_active_head_node(self, **kwargs):  # noqa: E501
        """Get Active Head Node Name  # noqa: E501

        Get the name of the active head node of the HPC Pack cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_active_head_node(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_active_head_node_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_active_head_node_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_active_head_node_with_http_info(self, **kwargs):  # noqa: E501
        """Get Active Head Node Name  # noqa: E501

        Get the name of the active head node of the HPC Pack cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_active_head_node_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_active_head_node" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/activeHeadNode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_date_time_format(self, **kwargs):  # noqa: E501
        """Get DateTime Format  # noqa: E501

        Get DateTime format for the DateTime objects returned in the API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_date_time_format(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_date_time_format_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_date_time_format_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_date_time_format_with_http_info(self, **kwargs):  # noqa: E501
        """Get DateTime Format  # noqa: E501

        Get DateTime format for the DateTime objects returned in the API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_date_time_format_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_date_time_format" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/info/dateTimeFormat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_first_operation(self, **kwargs):  # noqa: E501
        """Get the First Cluster Operation Log in Time Order  # noqa: E501

        Get the first cluster operation log in time order, optionally under given conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_first_operation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param datetime from_time: The start time(exclusive) in UTC
        :param datetime to_time: The end time(exclusive) in UTC
        :param str node_names: A comma-separated list of names for which the logs will be retrieved.
        :return: OperationLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_first_operation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_first_operation_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_first_operation_with_http_info(self, **kwargs):  # noqa: E501
        """Get the First Cluster Operation Log in Time Order  # noqa: E501

        Get the first cluster operation log in time order, optionally under given conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_first_operation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param datetime from_time: The start time(exclusive) in UTC
        :param datetime to_time: The end time(exclusive) in UTC
        :param str node_names: A comma-separated list of names for which the logs will be retrieved.
        :return: OperationLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'from_time', 'to_time', 'node_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_first_operation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_time' in params:
            query_params.append(('fromTime', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('toTime', params['to_time']))  # noqa: E501
        if 'node_names' in params:
            query_params.append(('nodeNames', params['node_names']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/operations/first', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_job_metrics(self, **kwargs):  # noqa: E501
        """Get Cluster Job Metrics  # noqa: E501

        Get cluster job metrics for the last 7 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_job_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: MetricData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_job_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_job_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_job_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster Job Metrics  # noqa: E501

        Get cluster job metrics for the last 7 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_job_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: MetricData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_job_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/metrics/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_metric_defintions(self, **kwargs):  # noqa: E501
        """Get cluster metric definitions  # noqa: E501

        Get cluster metric definitions. You can then get the history of a metric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metric_defintions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[MetricDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_metric_defintions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_metric_defintions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_metric_defintions_with_http_info(self, **kwargs):  # noqa: E501
        """Get cluster metric definitions  # noqa: E501

        Get cluster metric definitions. You can then get the history of a metric.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metric_defintions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[MetricDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_metric_defintions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/metrics/definitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MetricDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_metric_history(self, name, from_time, to_time, **kwargs):  # noqa: E501
        """Get cluster metric history  # noqa: E501

        Get cluster metric history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metric_history(name, from_time, to_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Metric name (required)
        :param datetime from_time: The start time in UTC (required)
        :param datetime to_time: The end time in UTC (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: MetricData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_metric_history_with_http_info(name, from_time, to_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_metric_history_with_http_info(name, from_time, to_time, **kwargs)  # noqa: E501
            return data

    def get_cluster_metric_history_with_http_info(self, name, from_time, to_time, **kwargs):  # noqa: E501
        """Get cluster metric history  # noqa: E501

        Get cluster metric history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metric_history_with_http_info(name, from_time, to_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Metric name (required)
        :param datetime from_time: The start time in UTC (required)
        :param datetime to_time: The end time in UTC (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: MetricData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'from_time', 'to_time', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_metric_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_cluster_metric_history`")  # noqa: E501
        # verify the required parameter 'from_time' is set
        if self.api_client.client_side_validation and ('from_time' not in params or
                                                       params['from_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_time` when calling `get_cluster_metric_history`")  # noqa: E501
        # verify the required parameter 'to_time' is set
        if self.api_client.client_side_validation and ('to_time' not in params or
                                                       params['to_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_time` when calling `get_cluster_metric_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'from_time' in params:
            query_params.append(('fromTime', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('toTime', params['to_time']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/metrics/history/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_node(self, name, **kwargs):  # noqa: E501
        """Get Cluster Node by Name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node name (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_node_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_node_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_cluster_node_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get Cluster Node by Name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node name (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_cluster_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_node_metrics(self, metric_names, **kwargs):  # noqa: E501
        """Get Node Metrics  # noqa: E501

        Get metrics of nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_metrics(metric_names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str metric_names: A comma separated names of metrics, available names are HPCCpuUsage, HPCMemoryPaging, HPCDiskThroughput, HPCNetwork and HPCCoresInUse (required)
        :return: list[NodeMetric]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_node_metrics_with_http_info(metric_names, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_node_metrics_with_http_info(metric_names, **kwargs)  # noqa: E501
            return data

    def get_cluster_node_metrics_with_http_info(self, metric_names, **kwargs):  # noqa: E501
        """Get Node Metrics  # noqa: E501

        Get metrics of nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_metrics_with_http_info(metric_names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str metric_names: A comma separated names of metrics, available names are HPCCpuUsage, HPCMemoryPaging, HPCDiskThroughput, HPCNetwork and HPCCoresInUse (required)
        :return: list[NodeMetric]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metric_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_node_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metric_names' is set
        if self.api_client.client_side_validation and ('metric_names' not in params or
                                                       params['metric_names'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `metric_names` when calling `get_cluster_node_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'metric_names' in params:
            query_params.append(('metricNames', params['metric_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NodeMetric]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_node_stat_of_health(self, **kwargs):  # noqa: E501
        """Get Cluster Node Stat of Health  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_stat_of_health(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeStatOfHealth
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_node_stat_of_health_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_node_stat_of_health_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_node_stat_of_health_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster Node Stat of Health  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_stat_of_health_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeStatOfHealth
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_node_stat_of_health" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/stats/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatOfHealth',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_node_stat_of_state(self, **kwargs):  # noqa: E501
        """Get Cluster Node Stat of State  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_stat_of_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeStatOfState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_node_stat_of_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_node_stat_of_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_node_stat_of_state_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster Node Stat of State  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_stat_of_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeStatOfState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_node_stat_of_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/stats/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatOfState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_nodes(self, **kwargs):  # noqa: E501
        """Get Cluster Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_nodes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of node names.
        :param str jobs: A comma-separated list of job ids.
        :param str group: A node group name.
        :param str state: Node state.
        :param str health: Node health.
        :return: list[Node]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster Nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_nodes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of node names.
        :param str jobs: A comma-separated list of job ids.
        :param str group: A node group name.
        :param str state: Node state.
        :param str health: Node health.
        :return: list[Node]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'names', 'jobs', 'group', 'state', 'health']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
        if 'jobs' in params:
            query_params.append(('jobs', params['jobs']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'health' in params:
            query_params.append(('health', params['health']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Node]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_operation(self, id, **kwargs):  # noqa: E501
        """Get Cluster Operation Log by ID  # noqa: E501

        Get cluster operation log by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_operation(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Operation ID (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: OperationLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_operation_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_operation_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cluster_operation_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Cluster Operation Log by ID  # noqa: E501

        Get cluster operation log by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_operation_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Operation ID (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: OperationLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_cluster_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/operations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_operations(self, **kwargs):  # noqa: E501
        """Get Cluster Operation Logs  # noqa: E501

        Get cluster operation logs in time order, with the latest log being first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_operations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param datetime from_time: The start time(exclusive) in UTC
        :param datetime to_time: The end time(exclusive) in UTC
        :param float limit: The max number of logs to return
        :param str node_names: A comma-separated list of names for which the logs will be retrieved.
        :param bool with_detail: Whether to include the \"Entries\" property for each log. By deafult no \"Entries\" will be returned. 
        :return: list[OperationLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_operations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_operations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_operations_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster Operation Logs  # noqa: E501

        Get cluster operation logs in time order, with the latest log being first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_operations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param datetime from_time: The start time(exclusive) in UTC
        :param datetime to_time: The end time(exclusive) in UTC
        :param float limit: The max number of logs to return
        :param str node_names: A comma-separated list of names for which the logs will be retrieved.
        :param bool with_detail: Whether to include the \"Entries\" property for each log. By deafult no \"Entries\" will be returned. 
        :return: list[OperationLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'from_time', 'to_time', 'limit', 'node_names', 'with_detail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_operations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_time' in params:
            query_params.append(('fromTime', params['from_time']))  # noqa: E501
        if 'to_time' in params:
            query_params.append(('toTime', params['to_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'node_names' in params:
            query_params.append(('nodeNames', params['node_names']))  # noqa: E501
        if 'with_detail' in params:
            query_params.append(('withDetail', params['with_detail']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/operations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OperationLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_version(self, **kwargs):  # noqa: E501
        """Get HPC Pack Version  # noqa: E501

        Get the version of Microsoft HPC Pack installed on the HPC cluster that hosts the web service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_version_with_http_info(self, **kwargs):  # noqa: E501
        """Get HPC Pack Version  # noqa: E501

        Get the version of Microsoft HPC Pack installed on the HPC cluster that hosts the web service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job(self, job_id, **kwargs):  # noqa: E501
        """Get Job  # noqa: E501

        Get information about the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the job for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the job. See [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29) for available properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get Job  # noqa: E501

        Get information about the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the job for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the job. See [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29) for available properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_custom_properties(self, job_id, **kwargs):  # noqa: E501
        """Get Job Custom Properties  # noqa: E501

        Get the values of the specified custom properties for the job, or the values of all of the properties if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_custom_properties(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the custom properties of the job for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the custom properties for the job.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_custom_properties_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_custom_properties_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_custom_properties_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get Job Custom Properties  # noqa: E501

        Get the values of the specified custom properties for the job, or the values of all of the properties if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_custom_properties_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the custom properties of the job for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the custom properties for the job.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_custom_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_custom_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/customProperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_environment_variables(self, job_id, **kwargs):  # noqa: E501
        """Get Job Environment Variables  # noqa: E501

        Get the values of the specified environment variables for the job, or the values of all of the environment variables if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_environment_variables(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the environment variables in the job for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the environment variables for the job. If an environment variable with a specified name does not exist for the job, the response contains an empty string for the value of that environment variable.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_environment_variables_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_environment_variables_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_environment_variables_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get Job Environment Variables  # noqa: E501

        Get the values of the specified environment variables for the job, or the values of all of the environment variables if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_environment_variables_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the environment variables in the job for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the environment variables for the job. If an environment variable with a specified name does not exist for the job, the response contains an empty string for the value of that environment variable.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_environment_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_environment_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/envVariables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_templates(self, **kwargs):  # noqa: E501
        """Get Job Templates  # noqa: E501

        Get a list of the names of the job templates that are available on the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_job_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_job_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get Job Templates  # noqa: E501

        Get a list of the names of the job templates that are available on the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs(self, **kwargs):  # noqa: E501
        """Get Job List  # noqa: E501

        Gets all/filtered jobs for the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str node_names: A comma-separated list of nodes names. It will list jobs running on these nodes. When this parameter is specified, all other parameters except the \"x-ms-as-user\" header are ignored. All properties of a jobs will be retrieved. An invalid name will be ignored. 
        :param str properties: A comma-separated list of the names for the properties of the jobs for which you want to get values. See [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29) for available properties.
        :param str owner: The user who created, submitted, or queued the job.
        :param str filter: Filter jobs by specified filters. A filter is in the form of \"<name>%20eq%20<value>\", and multiple filters can be ANDed like \"<filter1>%20and%20<filter2>…\". Available filter names are _JobState_, _NodeGroup_ and _ChangeTimeFrom_. 
        :param str sort_jobs_by: A job property by which jobs will be sorted. If this parameter is not specified or a property with a specified name does not exist for a job, the result will be sorted by job Id.
        :param bool asc: Specifies the sort order.
        :param float start_row: Specifies the start number of rows to read. The number of the first row is 0. When this parameter presents, pagination is activated and _queryId_ is ignored. And the total number of rows will be returned in the response header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be returned.
        :param int rows_per_read: Specifies how many rows of data to retrieve each time.
        :param str query_id: The value of the _x-ms-continuation-queryId_ header from the previouse response of this operation, used for reading the next page of data.
        :return: list[RestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Get Job List  # noqa: E501

        Gets all/filtered jobs for the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str node_names: A comma-separated list of nodes names. It will list jobs running on these nodes. When this parameter is specified, all other parameters except the \"x-ms-as-user\" header are ignored. All properties of a jobs will be retrieved. An invalid name will be ignored. 
        :param str properties: A comma-separated list of the names for the properties of the jobs for which you want to get values. See [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29) for available properties.
        :param str owner: The user who created, submitted, or queued the job.
        :param str filter: Filter jobs by specified filters. A filter is in the form of \"<name>%20eq%20<value>\", and multiple filters can be ANDed like \"<filter1>%20and%20<filter2>…\". Available filter names are _JobState_, _NodeGroup_ and _ChangeTimeFrom_. 
        :param str sort_jobs_by: A job property by which jobs will be sorted. If this parameter is not specified or a property with a specified name does not exist for a job, the result will be sorted by job Id.
        :param bool asc: Specifies the sort order.
        :param float start_row: Specifies the start number of rows to read. The number of the first row is 0. When this parameter presents, pagination is activated and _queryId_ is ignored. And the total number of rows will be returned in the response header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be returned.
        :param int rows_per_read: Specifies how many rows of data to retrieve each time.
        :param str query_id: The value of the _x-ms-continuation-queryId_ header from the previouse response of this operation, used for reading the next page of data.
        :return: list[RestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user', 'node_names', 'properties', 'owner', 'filter', 'sort_jobs_by', 'asc', 'start_row', 'rows_per_read', 'query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'node_names' in params:
            query_params.append(('nodeNames', params['node_names']))  # noqa: E501
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'sort_jobs_by' in params:
            query_params.append(('sortJobsBy', params['sort_jobs_by']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))  # noqa: E501
        if 'rows_per_read' in params:
            query_params.append(('rowsPerRead', params['rows_per_read']))  # noqa: E501
        if 'query_id' in params:
            query_params.append(('queryId', params['query_id']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_group(self, name, **kwargs):  # noqa: E501
        """Get Node Group  # noqa: E501

        Get a node group by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_node_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get Node Group  # noqa: E501

        Get a node group by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_node_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_groups(self, **kwargs):  # noqa: E501
        """Get Node Group List  # noqa: E501

        Get the names and descriptions for all of the node groups for the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[NodeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_node_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_node_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get Node Group List  # noqa: E501

        Get the names and descriptions for all of the node groups for the HPC cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[NodeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NodeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nodes_of_group(self, name, **kwargs):  # noqa: E501
        """Get Nodes of a Group  # noqa: E501

        Get the list of the nodes that belong to the specified node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodes_of_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nodes_of_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nodes_of_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_nodes_of_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get Nodes of a Group  # noqa: E501

        Get the list of the nodes that belong to the specified node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nodes_of_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nodes_of_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_nodes_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups/{name}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subtask(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Get Subtask  # noqa: E501

        Get the values of the specified properties for the specified subtask, or the values of all of the properties if no properties are specified. Only Parameteric Sweep job have subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subtask(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the subtask for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the subtask. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
            return data

    def get_subtask_with_http_info(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Get Subtask  # noqa: E501

        Get the values of the specified properties for the specified subtask, or the values of all of the properties if no properties are specified. Only Parameteric Sweep job have subtasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subtask_with_http_info(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the subtask for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the subtask. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'subtask_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subtask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_subtask`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_subtask`")  # noqa: E501
        # verify the required parameter 'subtask_id' is set
        if self.api_client.client_side_validation and ('subtask_id' not in params or
                                                       params['subtask_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subtask_id` when calling `get_subtask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'subtask_id' in params:
            path_params['subtaskId'] = params['subtask_id']  # noqa: E501

        query_params = []
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/subtasks/{subtaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task  # noqa: E501

        Get the values of the specified properties for the specified task, or the values of all of the properties if no properties are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the task for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the task. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task  # noqa: E501

        Get the values of the specified properties for the specified task, or the values of all of the properties if no properties are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the task for which you want to get values. If you do not specify this parameter, the response contains values for all of the properties of the task. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_custom_properties(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task Custom Properties  # noqa: E501

        Get the values of the specified custom properties for the task, or the values of all of the properties if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_custom_properties(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the custom properties of the task for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the custom properties for the task.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_custom_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_custom_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_custom_properties_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task Custom Properties  # noqa: E501

        Get the values of the specified custom properties for the task, or the values of all of the properties if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_custom_properties_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the custom properties of the task for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the custom properties for the task.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_custom_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_task_custom_properties`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_custom_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/customProperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_environment_variables(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task Environment Variables  # noqa: E501

        Get the values of the specified environment variables for the task, or the values of all of the environment variables if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_environment_variables(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the environment variables in the task for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the environment variables for the task. If an environment variable with a specified name does not exist for the task, the response contains an empty string for the value of that environment variable.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_environment_variables_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_environment_variables_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_environment_variables_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Get Task Environment Variables  # noqa: E501

        Get the values of the specified environment variables for the task, or the values of all of the environment variables if none are specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_environment_variables_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str names: A comma-separated list of the names for the environment variables in the task for which you want to get values. If you do not specify the Names parameter, the response contains values for all of the environment variables for the task. If an environment variable with a specified name does not exist for the task, the response contains an empty string for the value of that environment variable.
        :return: list[RestProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_environment_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_task_environment_variables`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_environment_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/envVariables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestProperty]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tasks(self, job_id, **kwargs):  # noqa: E501
        """Get Task List  # noqa: E501

        Get the values of the properties for all of the tasks in the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the tasks for which you want to get values. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :param bool expand_parametric: Specifies whether to get properties only for the master task for a parametric sweep task, or for all of the subtasks instead. True indicates that you want to get properties for all of the subtasks. False indicates that you want to get properties only for the master task.
        :param str filter: Filter tasks by specified filters. A filter is in the form of \"<name>%20eq%20<value>\", and multiple filters can be ANDed like \"<filter1>%20and%20<filter2>…\". Available filter names are _TaskState_, _ChangeTimeFrom_, _TaskStates_, _TaskIds_ and _TaskInstanceIds_. 
        :param str sort_tasks_by: A task property by which tasks will be sorted. If this parameter is not specified or a property with a specified name does not exist for a task, the result will be sorted by task Id.
        :param bool asc: Specifies the sort order.
        :param float start_row: Specifies the start number of rows to read. The number of the first row is 0. When this parameter presents, pagination is activated and _queryId_ is ignored. And the total number of rows will be returned in the response header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be returned.
        :param int rows_per_read: Specifies how many rows of data to retrieve each time.
        :param str query_id: The value of the _x-ms-continuation-queryId_ header from the previouse response of this operation, used for reading the next page of data.
        :return: list[RestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tasks_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tasks_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_tasks_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get Task List  # noqa: E501

        Get the values of the properties for all of the tasks in the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str properties: A comma-separated list of the names for the properties of the tasks for which you want to get values. See [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85)) for avaialbe properties.
        :param bool expand_parametric: Specifies whether to get properties only for the master task for a parametric sweep task, or for all of the subtasks instead. True indicates that you want to get properties for all of the subtasks. False indicates that you want to get properties only for the master task.
        :param str filter: Filter tasks by specified filters. A filter is in the form of \"<name>%20eq%20<value>\", and multiple filters can be ANDed like \"<filter1>%20and%20<filter2>…\". Available filter names are _TaskState_, _ChangeTimeFrom_, _TaskStates_, _TaskIds_ and _TaskInstanceIds_. 
        :param str sort_tasks_by: A task property by which tasks will be sorted. If this parameter is not specified or a property with a specified name does not exist for a task, the result will be sorted by task Id.
        :param bool asc: Specifies the sort order.
        :param float start_row: Specifies the start number of rows to read. The number of the first row is 0. When this parameter presents, pagination is activated and _queryId_ is ignored. And the total number of rows will be returned in the response header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be returned.
        :param int rows_per_read: Specifies how many rows of data to retrieve each time.
        :param str query_id: The value of the _x-ms-continuation-queryId_ header from the previouse response of this operation, used for reading the next page of data.
        :return: list[RestObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties', 'expand_parametric', 'filter', 'sort_tasks_by', 'asc', 'start_row', 'rows_per_read', 'query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `get_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501
        if 'expand_parametric' in params:
            query_params.append(('expandParametric', params['expand_parametric']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'sort_tasks_by' in params:
            query_params.append(('sortTasksBy', params['sort_tasks_by']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))  # noqa: E501
        if 'rows_per_read' in params:
            query_params.append(('rowsPerRead', params['rows_per_read']))  # noqa: E501
        if 'query_id' in params:
            query_params.append(('queryId', params['query_id']))  # noqa: E501

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RestObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_roles(self, **kwargs):  # noqa: E501
        """Get Cluster User Roles  # noqa: E501

        Get the roles of the cluster user who makes the API call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_roles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[UserRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_roles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_roles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_roles_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cluster User Roles  # noqa: E501

        Get the roles of the cluster user who makes the API call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_roles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: list[UserRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_roles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/userRoles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserRole]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_nodes_of_group(self, name, **kwargs):  # noqa: E501
        """Add/Remove Nodes to/from a Group  # noqa: E501

        Add nodes to, or remove nodes from, a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_nodes_of_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroupOperation operation:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_nodes_of_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.move_nodes_of_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def move_nodes_of_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """Add/Remove Nodes to/from a Group  # noqa: E501

        Add nodes to, or remove nodes from, a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_nodes_of_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroupOperation operation:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_nodes_of_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `move_nodes_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'operation' in params:
            body_params = params['operation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups/{name}/nodes', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operate_cluster_node(self, name, operation, **kwargs):  # noqa: E501
        """Operate a Cluster Node  # noqa: E501

        The requested operation will be performed asynchronously. The API doesn't ensure it's successfully on return. The caller has to query the node state for the operation result.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operate_cluster_node(name, operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node name (required)
        :param str operation: (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operate_cluster_node_with_http_info(name, operation, **kwargs)  # noqa: E501
        else:
            (data) = self.operate_cluster_node_with_http_info(name, operation, **kwargs)  # noqa: E501
            return data

    def operate_cluster_node_with_http_info(self, name, operation, **kwargs):  # noqa: E501
        """Operate a Cluster Node  # noqa: E501

        The requested operation will be performed asynchronously. The API doesn't ensure it's successfully on return. The caller has to query the node state for the operation result.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operate_cluster_node_with_http_info(name, operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node name (required)
        :param str operation: (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'operation', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operate_cluster_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `operate_cluster_node`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if self.api_client.client_side_validation and ('operation' not in params or
                                                       params['operation'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `operation` when calling `operate_cluster_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'operation' in params:
            path_params['operation'] = params['operation']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/{name}/operations/{operation}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requeue_job(self, job_id, **kwargs):  # noqa: E501
        """Requeue Job  # noqa: E501

        Resubmit the specified job to the queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requeue_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.requeue_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def requeue_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Requeue Job  # noqa: E501

        Resubmit the specified job to the queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requeue_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `requeue_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/requeue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requeue_subtask(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Requeue Subtask  # noqa: E501

        Move a failed, canceled, or queued subtask to the configuring state so that the subtask can be queued again when the job is resubmitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_subtask(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requeue_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
        else:
            (data) = self.requeue_subtask_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
            return data

    def requeue_subtask_with_http_info(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Requeue Subtask  # noqa: E501

        Move a failed, canceled, or queued subtask to the configuring state so that the subtask can be queued again when the job is resubmitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_subtask_with_http_info(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'subtask_id', 'x_ms_as_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requeue_subtask" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `requeue_subtask`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `requeue_subtask`")  # noqa: E501
        # verify the required parameter 'subtask_id' is set
        if self.api_client.client_side_validation and ('subtask_id' not in params or
                                                       params['subtask_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subtask_id` when calling `requeue_subtask`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'subtask_id' in params:
            path_params['subtaskId'] = params['subtask_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/subtasks/{subtaskId}/requeue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def requeue_task(self, job_id, task_id, **kwargs):  # noqa: E501
        """Requeue Task  # noqa: E501

        Move a failed, canceled, or queued task to the configuring state so that the task can be queued again when the job is resubmitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_task(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.requeue_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.requeue_task_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def requeue_task_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Requeue Task  # noqa: E501

        Move a failed, canceled, or queued task to the configuring state so that the task can be queued again when the job is resubmitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.requeue_task_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param str message: A message for the operation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method requeue_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `requeue_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `requeue_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'message' in params:
            body_params = params['message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/requeue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_job_custom_properties(self, job_id, **kwargs):  # noqa: E501
        """Set Job Custom Properties  # noqa: E501

        Set the values of custom properties for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_custom_properties(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Custom properties for the job
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_job_custom_properties_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_job_custom_properties_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def set_job_custom_properties_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Set Job Custom Properties  # noqa: E501

        Set the values of custom properties for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_custom_properties_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Custom properties for the job
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_job_custom_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_job_custom_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/customProperties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_job_environment_variables(self, job_id, **kwargs):  # noqa: E501
        """Set Job Environment Variables  # noqa: E501

        Sets the values of environment variables for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_environment_variables(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Environment variables for the job
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_job_environment_variables_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_job_environment_variables_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def set_job_environment_variables_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Set Job Environment Variables  # noqa: E501

        Sets the values of environment variables for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_environment_variables_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Environment variables for the job
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_job_environment_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_job_environment_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/envVariables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_job_properties(self, job_id, **kwargs):  # noqa: E501
        """Set Job Properties  # noqa: E501

        Set the values for the properties of the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_properties(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_job_properties_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_job_properties_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def set_job_properties_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Set Job Properties  # noqa: E501

        Set the values for the properties of the specified job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_job_properties_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to set
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_job_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_job_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_subtask_properties(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Set Subtask Properties  # noqa: E501

        Set the values of properties for a subtask in a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_subtask_properties(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of subtask to set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_subtask_properties_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_subtask_properties_with_http_info(job_id, task_id, subtask_id, **kwargs)  # noqa: E501
            return data

    def set_subtask_properties_with_http_info(self, job_id, task_id, subtask_id, **kwargs):  # noqa: E501
        """Set Subtask Properties  # noqa: E501

        Set the values of properties for a subtask in a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_subtask_properties_with_http_info(job_id, task_id, subtask_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param int subtask_id: Subtask Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of subtask to set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'subtask_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_subtask_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_subtask_properties`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `set_subtask_properties`")  # noqa: E501
        # verify the required parameter 'subtask_id' is set
        if self.api_client.client_side_validation and ('subtask_id' not in params or
                                                       params['subtask_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subtask_id` when calling `set_subtask_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501
        if 'subtask_id' in params:
            path_params['subtaskId'] = params['subtask_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/subtasks/{subtaskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_task_custom_properties(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Custom Properties  # noqa: E501

        Set the values of custom properties for a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_custom_properties(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Custom properties for the task
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_task_custom_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_task_custom_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def set_task_custom_properties_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Custom Properties  # noqa: E501

        Set the values of custom properties for a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_custom_properties_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Custom properties for the task
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_task_custom_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_task_custom_properties`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `set_task_custom_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/customProperties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_task_environment_variables(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Environment Variables  # noqa: E501

        Set the value of one or more environment variables for a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_environment_variables(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Environment variables for the task
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_task_environment_variables_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_task_environment_variables_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def set_task_environment_variables_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Environment Variables  # noqa: E501

        Set the value of one or more environment variables for a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_environment_variables_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Environment variables for the task
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_task_environment_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_task_environment_variables`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `set_task_environment_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}/envVariables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_task_properties(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Properties  # noqa: E501

        Set the values of properties for a task in a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_properties(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of task to set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_task_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_task_properties_with_http_info(job_id, task_id, **kwargs)  # noqa: E501
            return data

    def set_task_properties_with_http_info(self, job_id, task_id, **kwargs):  # noqa: E501
        """Set Task Properties  # noqa: E501

        Set the values of properties for a task in a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_task_properties_with_http_info(job_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param int task_id: Task Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of task to set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'task_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_task_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `set_task_properties`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `set_task_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/tasks/{taskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_job(self, job_id, **kwargs):  # noqa: E501
        """Submit Job  # noqa: E501

        Submit a job to the HPC Job Scheduler Service so that the HPC Job Scheduler Service can add the job to the queue of jobs to run. If the credentials for the account under which the job should run are not cached on the server, you can set them in the UserName and Password properties. A job that is submitted by this operation is not validated. After the job is submitted, you can get information about the job by using the Get Job operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to submit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_job_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_job_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def submit_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Submit Job  # noqa: E501

        Submit a job to the HPC Job Scheduler Service so that the HPC Job Scheduler Service can add the job to the queue of jobs to run. If the credentials for the account under which the job should run are not cached on the server, you can set them in the UserName and Password properties. A job that is submitted by this operation is not validated. After the job is submitted, you can get information about the job by using the Get Job operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int job_id: Job Id (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param list[RestProperty] properties: Properties of job to submit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ms_as_user', 'properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `submit_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties' in params:
            body_params = params['properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{jobId}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_group(self, name, **kwargs):  # noqa: E501
        """Update Node Group  # noqa: E501

        Update a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_group(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroup node_group:
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_group_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_group_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def update_node_group_with_http_info(self, name, **kwargs):  # noqa: E501
        """Update Node Group  # noqa: E501

        Update a node group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_group_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Node group name. (required)
        :param str x_ms_as_user: The name of user whom you want to make request as. You must be an HPC Pack administrator or HPC Pack Job administrator to make it work.
        :param NodeGroup node_group:
        :return: NodeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_ms_as_user', 'node_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `update_node_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ms_as_user' in params:
            header_params['x-ms-as-user'] = params['x_ms_as_user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_group' in params:
            body_params = params['node_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodeGroups/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
